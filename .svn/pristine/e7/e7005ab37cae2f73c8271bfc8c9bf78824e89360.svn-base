/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Controller;

import DatabaseMethods.ManageToursDatabaseMethods;
import Model.Tour;
import Model.Waypoint;
import UtilityClasses.DatabaseUtils;
import java.io.IOException;
import java.io.PrintWriter;
import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceUnit;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.transaction.UserTransaction;

/**
 *
 * @author alex
 */
@WebServlet(name = "GetToursNumber", urlPatterns = {"/GetToursNumber" })
public class GetToursNumber extends HttpServlet {

    /**
     * This is to access the Model Classes (DB).
     */
    @PersistenceUnit
    private EntityManagerFactory emf;
    /**
     * This is to access the Model Classes (DB).
     */
    @Resource
    private UserTransaction utx;

    /**
     * Process request.
     * @param request.
     * @param response.
     * @throws ServletException.
     * @throws IOException.
     */
    protected void processRequest(
            final HttpServletRequest request,
            final HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();

        HttpSession session = request.getSession(true);
        EntityManager em = DatabaseUtils.StartDBTransaction(emf, utx);
        ManageToursDatabaseMethods createTourLogic =
                new ManageToursDatabaseMethods(em);

        if (request.getParameter("object").contains("tour")) {
            int allTours = createTourLogic.getAllTours().size();
            session.setAttribute("ToursNumber", allTours + "");
            DatabaseUtils.EndDBTransaction(utx, em);
            out.write((String) session.getAttribute("ToursNumber"));
        } else {
	        if (request.getParameter("object").contains("waypoint")) {
	            HttpSession IDtour = request.getSession(true);
	            String idTour = IDtour.getAttribute("IDtour").toString();
	            int allWaypoints = createTourLogic.getAllWaypointsByTourId(
	            		Integer.parseInt(idTour)).size();
	            session.setAttribute("WaypointsNumber", allWaypoints + "");
	            DatabaseUtils.EndDBTransaction(utx, em);
	            out.write((String) session.getAttribute("WaypointsNumber"));
	        }
        }
        // This variable has the list of tours
        // Always need to end with this call.
    }
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods">
    /**
     * Handles the HTTP
     * <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(
    		HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP
     * <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(
    		HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
