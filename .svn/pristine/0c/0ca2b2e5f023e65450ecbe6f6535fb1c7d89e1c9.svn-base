/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Controller;

import DatabaseMethods.ManageToursDatabaseMethods;
import Model.Tour;
import Model.Waypoint;
import UtilityClasses.DatabaseUtils;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceUnit;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.transaction.UserTransaction;

/**
 *
 * @author Beatriz
 */
public class ListToursServlet extends HttpServlet {

    /**
     * This is to access the Model Classes (DB).
     */
    @PersistenceUnit
    private EntityManagerFactory emf;
    /**
     * This is to access the Model Classes (DB).
     */
    @Resource
    private UserTransaction utx;

    /**
     * Process request.
     * @param request.
     * @param response.
     * @throws ServletException.
     * @throws IOException.
     */
    public void processRequest(
    		HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");

        String ResponseContent = "";
        String CoordinatesList = "";

        PrintWriter out = response.getWriter();

        EntityManager em = DatabaseUtils.StartDBTransaction(emf, utx);

        ManageToursDatabaseMethods createTourLogic =
        		new ManageToursDatabaseMethods(em);

        // This variable has the list of tours
        List<Tour> allTours = createTourLogic.getAllTours();
        String SRC = "";
        String distance = "";
        String ImageRS = "";
        try {
            for (int i = 0; i < allTours.size(); i++) {

                List<Waypoint> Coordinates = createTourLogic.
                        getAllWaypointsByTourId(allTours.get(i).getTourId());
                CoordinatesList = "<table style='width:100%;'>"
                        + "<td style='border:none;width:60%;'>";

                CoordinatesList += "<table class='noBorders'>";

                for (int j = 0; j < Coordinates.size(); j++) {
                    if (j == 0) {
                        SRC = "images/start-race-2.png";
                    } else if (j == Coordinates.size() - 1) {
                        SRC = "images/cup.png";
                    } else {
                        SRC = "images/number_" + j + ".png";
                    }

                    CoordinatesList += "<tr><td style='border:none;padding:0"
                            + " px;border-spacing:0 px;'><img src='" + SRC
                            + "'/></td><td style='vertical-align: "
                            + "middle;border:none;'>"
                            + Coordinates.get(j).getWaypointName()
                            + "</td><td style='vertical-align: "
                            + "middle;border:none;'>"
                            + Coordinates.get(j).getWaypointLatitude()
                            + "</td><td style='vertical-align: "
                            + "middle;border:none;'>"
                            + Coordinates.get(j).getWaypointLongitude()
                            + "</td></tr>";


                }
                CoordinatesList += "</table>";

                // folder = System.getProperty("user.home")+ "/temp/";
                if (allTours.get(i).getsDistance() != null) {
                    distance = "Total distance:"
                            + allTours.get(i).getsDistance() + " m";
                } else {
                    distance = " ";
                }
                if (allTours.get(i).getsDistance() != null) {
                    distance = "Total distance:"
                            + allTours.get(i).getsDistance() + " m";
                } else {
                    distance = " ";
                }
                if (allTours.get(i).getsBadgeURL() != null) {
                    ImageRS = allTours.get(i).getsBadgeURL();
                    ImageRS = ImageRS.substring(ImageRS.
                            lastIndexOf(File.separator), ImageRS.length());
                    CoordinatesList += "</td><td "
                            + "style='middle;border:none;width:40%;'>"
                            + "<img id='bageImage' src='uploads" + ImageRS
                            + "' height='128' width='128'/></br></br>"
                            + distance + "</td></table>";

                } else {
                    ImageRS = "images/nopicture.jpg";
                    CoordinatesList += "</td><td "
                            + "style='middle;border:none;width:40%;'>"
                            + "<img id='bageImage' src='" + ImageRS
                            + "' height='128' width='128'/></br></br>"
                            + distance + "</td></table>";
                }

                ResponseContent += allTours.get(i).getTourId() + "|"
                        + "<a class='E' href='#'>"
                        + allTours.get(i).getTourName() + "</a>|"
                        + allTours.get(i).getTourDifficulty() + "|"
                        + allTours.get(i).getTourDescription() + "|"
                        + "<a class='E' href='editTour.jsp?tour="
                        + allTours.get(i).getTourId()
                        + "'>Edit</a>&nbsp&nbsp&nbsp<a class='D' "
                        + "href='DeleteTourServlet?tourdelete="
                        + allTours.get(i).getTourId() + "'>Delete</a>" + "|"
                        + CoordinatesList + "|";
            }
            out.println(ResponseContent);

        } finally {
            out.close();
        }

        // Always need to end with this call.
        DatabaseUtils.EndDBTransaction(utx, em);
    }

    /**
     * Build table.
     * @param TN.
     * @return table.
     * @throws ServletException.
     */
    public String BuildTable(String TN) throws ServletException {

        //  HttpSession ToursNumber = request.getSession(true);
        //  <td class='servSHd'>#</td><td class='servSHd'>#</td>

        String HtmlContent =
                "<table id='report' class='servicesT' cellspacing='0'>"
                + "<td class='servSHd'>Tour name</td><td class='servSHd'>"
                + "Difficulty</td>"
                + "<td class='servSHd'>Description</td> <td class='servSHd'> "
                + "</td></tr>";
        //10 seesion record count
        for (int i = 1; i < Integer.parseInt(TN) + 1; i++) {
            HtmlContent += "<tr>"
                    + "<td id='name" + (i)
                    + "' class='servBodL'  style='color:orange; "
                    + "font-weight:bold;'><a class='S' href='#dialog' "
                    + "name='modal' title='Browse'></a></td>"
                    + "<td id='difficulty" + (i) + "' class='servBodL'>"
                    + (i + 2) + "</td>"
                    + "<td id='description" + (i) + "' class='servBodL'>"
                    + (i + 4) + "</td>"
                    + "<td id='rowcontrol" + (i)
                    + "' class='servBodL' style='text-align: center;'></td>"
                    + "</tr>"
                    + "<tr>"
                    + "<td colspan='4'id='details" + (i)
                    + "' style='text-align: left;' class='servBodL'></td>"
                    + "</tr>";
        }
        HtmlContent += "</table>";

        return HtmlContent;
    }
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods">

    /**
     * Handles the HTTP
     * <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(
    		HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP
     * <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(
    		HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
